{"version":3,"sources":["components/ContactSearch.js","components/ContactNew.js","components/Contact.js","components/ContactList.js","services/contact.js","components/Notification.js","App.js","index.js"],"names":["ContactSearch","props","type","onChange","event","handleInput","ContactNew","onSubmit","handleSubmit","handleContactInput","value","contactData","name","number","Contact","onClick","delete","ContactList","list","map","person","id","baseUrl","contactServices","getAll","axios","get","then","response","data","create","newObj","post","update","put","deleteContact","Notification","notification","message","style","color","background","border","borderRadius","padding","fontSize","marginBottom","App","existingContact","useState","persons","setPersons","setContactData","searchText","setSearchText","searchResults","setSearchResults","setNotification","useEffect","allContacts","regex","RegExp","filter","test","setTimeout","target","preventDefault","contact","some","obj2","obj1","toLowerCase","window","confirm","updatedContact","newContact","concat","catch","error","Object","getOwnPropertyNames","forEach","prop","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2748f09e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst ContactSearch = (props) => {\r\n  return (\r\n    <div>\r\n      filter shown with\r\n      <input type='text' onChange={(event) => props.handleInput(event)} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ContactSearch\r\n","import React from 'react'\r\n\r\nconst ContactNew = (props) => {\r\n  return (\r\n    <form onSubmit={(event) => props.handleSubmit(event)}>\r\n      <div>\r\n        name:\r\n        <input\r\n          type='text'\r\n          onChange={props.handleContactInput}\r\n          value={props.contactData.name}\r\n          name='name'\r\n        />\r\n      </div>\r\n      <div>\r\n        number:\r\n        <input\r\n          type='tel'\r\n          onChange={props.handleContactInput}\r\n          value={props.contactData.number}\r\n          name='number'\r\n        />\r\n      </div>\r\n      <button type='submit'>add</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default ContactNew\r\n","import React from 'react'\r\n\r\nconst Contact = (props) => {\r\n  return (\r\n    <div>\r\n      {props.name} {props.number}\r\n      <button onClick={props.delete}>delete</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Contact\r\n","import React from 'react'\r\nimport Contact from './Contact'\r\n\r\nconst ContactList = (props) => {\r\n  return (\r\n    <div>\r\n      <h2>Numbers</h2>\r\n      {props.list.map((person) => (\r\n        <Contact\r\n          name={person.name}\r\n          number={person.number}\r\n          key={person.id}\r\n          delete={() => props.delete(person.id)}\r\n        />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ContactList\r\n","import axios from 'axios'\r\n\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then((response) => response.data)\r\n}\r\n\r\nconst create = (newObj) => {\r\n  const request = axios.post(baseUrl, newObj)\r\n  return request.then((response) => response.data)\r\n}\r\n\r\nconst update = (id, newObj) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObj)\r\n  return request.then((response) => response.data)\r\n}\r\n\r\nconst deleteContact = (id) => {\r\n  return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nconst contactServices = { getAll, create, update, deleteContact }\r\n\r\nexport default contactServices\r\n","import React from 'react'\r\n\r\n// there are three types of notificatios - success, error and alert.\r\n\r\nconst Notification = ({ notification }) => {\r\n  //#region style definitions\r\n  const successNotification = {\r\n    color: 'green',\r\n    background: 'lightgrey',\r\n    border: '5px solid',\r\n    borderRadius: 5,\r\n    padding: 10,\r\n    fontSize: 20,\r\n    marginBottom: 15,\r\n  }\r\n\r\n  const alertNotification = {\r\n    color: 'red',\r\n    background: 'lightgrey',\r\n    border: '5px solid',\r\n    borderRadius: 5,\r\n    padding: 10,\r\n    fontSize: 20,\r\n    marginBottom: 15,\r\n  }\r\n  //#endregion\r\n\r\n  if (notification === null) return null\r\n  const { message, type } = notification\r\n  return message === null ? null : (\r\n    <div style={type === 'success' ? successNotification : alertNotification}>\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification\r\n","import React, { useState, useEffect } from 'react'\nimport ContactSearch from './components/ContactSearch'\nimport ContactNew from './components/ContactNew'\nimport ContactList from './components/ContactList'\nimport contactServices from './services/contact'\nimport Notification from './components/Notification'\n\nconst App = () => {\n  // #region state definitions\n  const [persons, setPersons] = useState([])\n  const [contactData, setContactData] = useState({\n    name: '',\n    number: '',\n  })\n  const [searchText, setSearchText] = useState('')\n  const [searchResults, setSearchResults] = useState([])\n  const [notification, setNotification] = useState(null)\n\n  //#endregion\n\n  // #region local variables\n  let existingContact\n  //#endregion\n\n  // #region other functions\n  const isDuplicateContact = (obj1, obj2) => {\n    if (obj1.name.toLowerCase() === obj2.name.toLowerCase()) {\n      existingContact = obj1\n      return true\n    }\n\n    return false\n  }\n\n  //#endregion\n\n  // #region event handlers\n  const handleSearchInput = (event) => {\n    setSearchText(event.target.value)\n  }\n\n  const handleContactInput = (event) => {\n    setContactData({ ...contactData, [event.target.name]: event.target.value })\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    const contact = {\n      name: contactData.name,\n      number: contactData.number,\n    }\n\n    const alreadyExists = persons.some((person) =>\n      isDuplicateContact(person, contact)\n    )\n\n    if (alreadyExists) {\n      if (\n        window.confirm(\n          `${existingContact.name} is already added to the phonebook, replace the old number with a new one?`\n        )\n      ) {\n        const updatedContact = {\n          ...contact,\n          number: contactData.number,\n        }\n        contactServices\n          .update(existingContact.id, updatedContact)\n          .then((contact) => {\n            setPersons(\n              persons.map((person) =>\n                person.id !== existingContact.id ? person : contact\n              )\n            )\n            return contact\n          })\n          .then((contact) =>\n            setNotification({\n              message: `Updated number for ${contact.name}`,\n              type: 'success',\n            })\n          )\n      }\n    } else {\n      contactServices\n        .create(contact)\n        .then((newContact) => {\n          setPersons(persons.concat(newContact))\n        })\n        .then(() =>\n          setNotification({\n            message: `Added ${contact.name}`,\n            type: 'success',\n          })\n        )\n        .catch((error) =>\n          setNotification({\n            message: error.message,\n            type: 'error',\n          })\n        )\n    }\n\n    Object.getOwnPropertyNames(contactData).forEach(\n      (prop) => (contactData[prop] = '')\n    )\n  }\n\n  const deleteContact = (id) => {\n    const person = persons.find((person) => person.id === id)\n    if (window.confirm(`Delete ${person.name}`))\n      contactServices\n        .deleteContact(id)\n        .then(() => {\n          setPersons(persons.filter((person) => person.id !== id))\n          setNotification({\n            message: `Removed ${person.name}`,\n            type: 'alert',\n          })\n        })\n        .catch(() =>\n          setNotification({\n            message: `Information of ${person.name} has already been removed from the server.`,\n            type: 'error',\n          })\n        )\n  }\n\n  //#endregion\n\n  // #region side effects\n\n  useEffect(() => {\n    contactServices.getAll().then((allContacts) => setPersons(allContacts))\n  }, [])\n\n  // updating the search results\n  useEffect(() => {\n    const regex = new RegExp(searchText, 'i')\n    setSearchResults(\n      searchText ? persons.filter((person) => regex.test(person.name)) : persons\n    )\n  }, [searchText, persons])\n\n  //clearing out displayed notification\n  useEffect(() => {\n    setTimeout(() => setNotification(null), 5000)\n  }, [notification])\n\n  //#endregion\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification notification={notification} />\n      <ContactSearch handleInput={handleSearchInput} />\n      <h3>add a new</h3>\n      <ContactNew\n        handleSubmit={handleSubmit}\n        handleContactInput={handleContactInput}\n        contactData={contactData}\n      />\n      <ContactList list={searchResults} delete={deleteContact} />\n    </div>\n  )\n}\nexport default App\n","import ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}